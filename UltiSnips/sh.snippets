#  _               _                   _                  _
# | |__   __ _ ___| |__      ___ _ __ (_)_ __  _ __   ___| |_ ___
# | '_ \ / _` / __| '_ \    / __| '_ \| | '_ \| '_ \ / _ \ __/ __|
# | |_) | (_| \__ \ | | |   \__ \ | | | | |_) | |_) |  __/ |_\__ \ 
# |_.__/ \__,_|___/_| |_|   |___/_| |_|_| .__/| .__/ \___|\__|___/
#                                       |_|   |_|

snippet if "if statement" b
if ${1:[[ ${2:condition} ]]}
then
	${3:${VISUAL:code_block}}$4
fi$0
endsnippet

snippet elif "elif statement" b
elif ${1:[[ ${2:condition} ]]}
then
	${3:${VISUAL:code_block}}$0
endsnippet

snippet ] "condition in if (regex works too)"
[[ $1 ]]$0
endsnippet

# snippet ]] "condition in if with regex"
# [[ $1 ]]$0
# endsnippet

snippet echo "Echo things in bash" b
echo -e "\\t${1:${VISUAL:text}}"$0
endsnippet

snippet ds "Doc-string" b
# DOC-STRING
# ${VISUAL}$0
endsnippet

global !p
def fix_indent(snip):
    vim.eval(r'feedkeys("\<c-f>")')
endglobal

post_expand "fix_indent(snip)"
snippet hd "HereDoc" b
${1:command} <<- '${2:Delimiter}'
$3
$2
$0
endsnippet


snippet rr "reading response" b
echo -e "\t$1? [Y/n] \c"
read response
if [ "$response" == "${2:n}" ] || [ "$response" == "${3:N}" ]
then
	echo -e "\t${4:${VISUAL:Quitting}}."
	${5:do_this}
else
	${6:${VISUAL:do_this}}
fi
$0
endsnippet

