#  _               _                   _                  _
# | |__   __ _ ___| |__      ___ _ __ (_)_ __  _ __   ___| |_ ___
# | '_ \ / _` / __| '_ \    / __| '_ \| | '_ \| '_ \ / _ \ __/ __|
# | |_) | (_| \__ \ | | |   \__ \ | | | | |_) | |_) |  __/ |_\__ \ 
# |_.__/ \__,_|___/_| |_|   |___/_| |_|_| .__/| .__/ \___|\__|___/
#                                       |_|   |_|

global !p
import re
from my_snippets_helpers import *

def fix_indent(snip):
    vim.eval(r'feedkeys("\<c-f>")')
    # vim.command("normal! ==")
endglobal

snippet if "if statement" b
if ${1:[[ ${2:condition} ]]}
then
	${3:${VISUAL:code_block}}$4
fi$0
endsnippet

# post_expand "fix_indent(snip)"
# snippet 'el(s(e)?)?' "else statement" br
# else
# 	$1
# endsnippet

post_expand "fix_indent(snip)"
snippet 'e(l)?i(f)?' "elif statement" br
elif ${1:[[ ${2:condition} ]]}
then
	${3:${VISUAL:code_block}}$0
endsnippet

snippet ] "condition in if (regex works too)" w
[[ ${1:condition} ]]$0
endsnippet

snippet ) "condition in if with numeric values" w
(( ${1:condition} ))
endsnippet

# # Need ]] for normal use
# snippet ]] "condition in if with regex" w
# [[ $1 ]]$0
# endsnippet

snippet case "case ... esac block" b
case "${1}" in
	${2:pattern1})
		${3:# code for case `!p snip.rv = t[2]`}
		;;
	${4:pattern2})
		${5:# code for case `!p snip.rv = t[3]`}
		;;
	*)
		${6:# default case}
		;;
esac
endsnippet

post_expand "fix_indent(snip)"
snippet 'ca?b' "new case block" br
${1:pattern})
	${2:# code for `!p snip.rv = t[1]`}
	;;$0
endsnippet

snippet 'wh(i(l(e)?)?)?' "while loop" br
while [[ ${1:condition} ]]
do
	${2:# body}
done$0
endsnippet

# # Output: printf '\\t'"Text here\\n"$0
# snippet echo "Echo things in bash" bA
# printf '\\t'"${1:${VISUAL:text}}\\n"$0
# endsnippet

# # Output: printf '\\t'"Text here\\n"$0
# snippet '(,|_)pr' "printf in bash" brA
# printf "\\t""${1:`!p
# text = snip.v.text.strip()
# # text = text.lstrip("echo -m printf").strip('"\'')
# text = re.sub(r'^\s*(?:echo\s+-m|echo|printf)\s+', '', text)
# text = text.strip('\"\'')
# text = re.sub(r'^(?:\\[nt])+', '', text)
# text = re.sub(r'(?:\\[nt])+$', '', text)
# text = text.strip('\"\'')
# text = re.sub(r'^(?:\\[nt])+', '', text)
# text = re.sub(r'(?:\\[nt])+$', '', text)
# text = text.strip()
# if not text:
# 	snip.rv = "text"
# else:
# 	snip.rv = text
# `}""\\n"$0
# endsnippet

# Output: printf '\\t'"Text here\\n"$0
snippet '(,|_)pr' "printf in bash" brA
printf "\\t""${1:`!p
text = snip.v.text
text = strip_remove(text, ["echo", "-m", "printf", "--"], [], '\"\'', '\"\'', strip_lit_esc=True)
text = strip_remove(text, [], [], '\"\'', '\"\'', True)
if not text:
	snip.rv = "text"
else:
	snip.rv = text
`}""\\n"$0
endsnippet

snippet fn "function" b
${1:fun_name}(){
	${2:${VISUAL:code_block}}
}$0
endsnippet

snippet ds "Doc-string" b
# DOC-STRING
# ${VISUAL}$0
endsnippet

post_expand "fix_indent(snip)"
snippet hd "HereDoc" b
${1:command} <<- '${2:Delimiter}'
$3
$2
$0
endsnippet

# read -p $'\t'"${1:`!p snip.rv = snip.v.text.strip().lstrip("echo -m printf read").strip('\"\'').lstrip('\\t').rstrip('\\n').strip('\"\'').lstrip('\\t').rstrip('\\n')`}.""Do you want to ${2:...}? [Y/n] " ${3:response}
snippet rry "reading response, default 'y'" b
read -p $'\t'"Do you want to ${1:...}? [Y/n] " ${2:response}
if [[ "${$2,,}" =~ ^(n|no)$ ]]
then
	${4:${VISUAL:do_this}}
else
	printf "\t""${5:Quitting}.""\n"$6
fi$7
endsnippet

snippet rrn "reading response, default 'n'" b
read -p $'\t'"Do you want to ${1:...}? [y/N] " ${2:response}
if [[ "${$2,,}" =~ ^(y|ye|yes)$ ]]
then
	${4:${VISUAL:do_this}}
else
	printf "\t""${5:Quitting}.""\n"$6
fi$7
endsnippet

snippet yn "yes|no check" b
$1if [[ "\${$2,,}" =~ ^($3`!p snip.rv = "|ye|yes" if t[3] =='y' else ""``!p snip.rv = "|no" if t[3] == 'n' else ""`)$ ]]$5
endsnippet
