#  ____          _    _
# |  _ \  _   _ | |_ | |__    ___   _ __
# | |_) || | | || __|| '_ \  / _ \ | '_ \ 
# |  __/ | |_| || |_ | | | || (_) || | | |
# |_|     \__, | \__||_| |_| \___/ |_| |_|
#         |___/
#              _                      _
#  ___  _ __  (_) _ __   _ __    ___ | |_  ___
# / __|| '_ \ | || '_ \ | '_ \  / _ \| __|/ __|
# \__ \| | | || || |_) || |_) ||  __/| |_ \__ \
# |___/|_| |_||_|| .__/ | .__/  \___| \__||___/
#                |_|    |_|

snippet em "Execute modules"
if __name__ == "__main__":
	${1:${VISUAL:pass}}$0
endsnippet

# Time module{{{

snippet time "Importing and start_time" b
import time
ts = time.time()$0
endsnippet

snippet ts "time start of a program" b
ts = time.time()
endsnippet

snippet tss "time start of a sub-program" b
ts0 = time.time()
endsnippet

snippet rt "Print runtime of a program" b
print(f"\nProgram ran for {time.time() - ts:.2f} secs.")$0
endsnippet

snippet rts "Print runtime of a sub-program" b
print(f"\nSub-program ran for {time.time() - ts0:.2f} secs.")$0
endsnippet

#}}}

# Title format{{{

snippet wt "21 = symbols[[ Write title like this ]]21 = symbols" b
# =====================[[ ${1:${VISUAL}} ]]=====================
$0
endsnippet

snippet pt "[========== Print title like this ==========]" b
# [========== Print title like this ==========]
print(f"\t\t[{10*'='} ${1:${VISUAL}} {10*'='}]\n")
endsnippet

snippet # "Commenting as doc-string" b
"""
${1:${VISUAL}}$0
"""
endsnippet

#}}}

# Types{{{

snippet ty "type" w
type($1)$0
endsnippet

snippet fl "float" w
float($1)$0
endsnippet

snippet int "int" w
int($1)$0
endsnippet

snippet st "string" w
str($1)$0
endsnippet

snippet dic "Dictionaries" w
${1:${VISUAL:dicName}}Dict = {
	${2:key} : ${3:value},
	${4:key} : ${5:value}$6
}
$0
endsnippet

snippet k "key-value for dictionary" w
${1:key} : ${2:value}$0
endsnippet


#}}}

snippet 3' "3 single quotes" iA
'''$1'''$2
endsnippet

snippet 3" "3 double quotes" iA
"""$1"""$2
endsnippet

snippet pr "Print in python" b
print(${1:${VISUAL}})$0
endsnippet

snippet ra "range function"
range($1)$0
endsnippet

# Function{{{

snippet def "Defining functions" bm
def ${1:foo}($2):
	${3:${VISUAL}}$4

    return$5
$0
endsnippet

snippet fn "Defining functions" bm
def ${1:foo}($2):
	${3:${VISUAL}}$4

    return$5
$0
endsnippet

snippet fns "Defining functions in classes" bm
def ${1:foo}(self, $2):
	${3:${VISUAL}}$4

    return$5
$0
endsnippet

#}}}

snippet if "if statement" bm
if ${1:BOOLEAN}:
	${2:${VISUAL:pass}}$3
$0
endsnippet

# Loops{{{

snippet for "for loop" bm
for ${1:ITERABLE}:
	${2:${VISUAL:pass}}$3
$0
endsnippet

snippet wh "while loop" bm
${1:# Initialize while loop}
while ${2:BOOLEAN}:
	${3:${VISUAL:break}}$4

    ${5:# Re-initialize while loop}
$0
endsnippet

snippet whi "while loop" bm
${1:# Initialize while loop}
while ${2:BOOLEAN}:
	${3:${VISUAL:break}}$4

    ${5:# Re-initialize while loop}
$0
endsnippet

snippet whil "while loop" bm
${1:# Initialize while loop}
while ${2:BOOLEAN}:
	${3:${VISUAL:break}}$4

    ${5:# Re-initialize while loop}
$0
endsnippet

snippet while "while loop" bm
${1:# Initialize while loop}
while ${2:BOOLEAN}:
	${3:${VISUAL:break}}$4

    ${5:# Re-initialize while loop}
$0
endsnippet

#}}}

snippet try "try block in python" b
try:
	${1:${VISUAL:this}}
except$2:
	# if can't, do that
	${3:pass}
${4:finally:
	$0}
endsnippet

snippet ex "except block for try-except" b
except$1:
	$0
endsnippet

